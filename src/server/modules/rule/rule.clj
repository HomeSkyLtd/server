(ns server.modules.rule.rule
	(:require [server.db :as db]
			  [server.utils :as utils]))

(defn- coll-name [houseId] (str "rules_" houseId))

(defn new-rules [obj houseId agentId]
	"Insert rules into database. These rules are those defined in the App, so are already accepted by the user."
	(if-let [rules (:rules obj)]
		(if (every? true? (map #(and (contains? % :nodeId) (contains? % :commandId) (contains? % :controllerId)  (contains? % :value) (contains? % :clauses)) rules))
				(if (every? true? 
					(map  #(db/insert? (coll-name houseId) (assoc % :accepted 1)) rules))
					{:status 200}
					{:status 500 :errorMessage "DB did not insert values."}
				)
				{:status 400 :errorMessage "Define nodeId, controllerId, commandId, value and clauses."}
		)
		{:status 400 :errorMessage "Rules not defined"}
	)
)

(defn get-rules [_ houseId _]
	"Select rules from db that were generated and already accepted."
	{:status 200 :rules (into [] (map #(dissoc % :_id) (db/select (coll-name houseId) {:accepted 1})))}
)

(defn get-learnt-rules [_ houseId _]
	"Select rules from db that were generated by the machine learning algorithms."
	{:status 200 
	 :rules (into [] (map #(dissoc % :_id) (db/select (coll-name houseId) {:accepted 0})))}
)

(defn accept-rule [obj houseId _]
	"Accepted a new rule"
	(let [key-vals (select-keys obj [:nodeId :controllerId :commandId :value])
		  result (db/select (coll-name houseId) (merge key-vals {:accepted 1}))]
		(if (empty? result)
			(if (db/update? (coll-name houseId) key-vals :set {:accepted 1})
				{:status 200}
				{:status 500 :errorMessage "DB did not update value."})
			{:status 200 :conflictingRule result})))

(defn remove-rule [obj houseId _]
	"Remove a rule from database"
	(let [key-vals (select-keys obj [:nodeId :controllerId :commandId :value])]
		(if (empty? (db/select (coll-name houseId) key-vals))
			{:status 400 :errorMessage "DB does not contain obj."}
			(if (db/remove? (coll-name houseId) (assoc key-vals :accepted 1))
				{:status 200}
				{:status 500 :errorMessage "DB did not remove value."}
			)
		)
	)
)

(defn notify-learnt-rules[houseId tokens msg]
	"Send a notification to user's device with new learnt rules."
	(utils/send-notification (tokens houseId) msg))