(ns server.modules.rule.rule
	(:require [server.db :as db]
			  [server.utils :as utils]))

(defn- coll-name [houseId] (str "rules_" houseId))

(defn new-rules [obj houseId agentId]
	"Insert rules into database. These rules are those defined in the App, so are already accepted by the user."
	(if-let [rules (:rules obj)]
		(if (every? true? (map #(and (contains? % :nodeId) (contains? % :commandId) (contains? % :controllerId)  (contains? % :value) (contains? % :clauses)) rules))
				(if (every? true? 
					(map  #(db/insert? (coll-name houseId) (assoc % :accepted true)) rules))
					{:status 200}
					{:status 500 :errorMessage "DB did not insert values."}
				)
				{:status 400 :errorMessage "Define nodeId, controllerId, commandId, value and clauses."}
		)
		{:status 400 :errorMessage "Rules not defined"}
	)
)

(defn get-rules [_ houseId _]
	"Select rules from db that were generated and already accepted."
	;(println {:rules (map #(dissoc % :_id) (db/select (coll-name houseId) {:accepted true}))})
	{:status 200 :rules (map #(dissoc % :_id) (db/select (coll-name houseId) {:accepted true}))}
)

(defn get-learnt-rules [_ houseId _]
	"Select rules from db that were generated by the machine learning algorithms."
	{:status 200 :rules (map #(dissoc % :_id) (db/select (coll-name houseId) {:accepted false}))}
)

(defn notify-learnt-rules[houseId tokens msg]
	"Send a notification to user's device with new learnt rules."
	(utils/send-notification (tokens houseId) msg))